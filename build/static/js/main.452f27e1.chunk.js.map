{"version":3,"sources":["img/collov.jpg","components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestion","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endPoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","starTrivia","Easy","newQuestion","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTION","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.452f27e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/collov.59eea93c.jpg\";","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? \"linear-gradient(90deg,#56ffa4, #59bc86)\"\n        : !correct && userClicked\n        ? \"linear-gradient(90deg, #ff5656, #c16868 )\"\n        : \"linear-gradient(90deg, #56ccff, #6eafb4 )\"};\n    border: 3px solid #fff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n  Easy = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endPoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endPoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","import React from \"react\";\nimport { AnswerObject } from \"../App\";\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestion: number;\n};\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestion,\n}) => {\n  return (\n    <Wrapper>\n      <p className=\"number\">\n        Question: {questionNr} / {totalQuestion}\n      </p>\n      <p dangerouslySetInnerHTML={{ __html: question }} />\n      <div>\n        {answers.map((answer) => (\n          <ButtonWrapper\n            key={answer}\n            correct={userAnswer?.correctAnswer === answer}\n            userClicked={userAnswer?.answer === answer}\n          >\n            <button disabled={!!userAnswer} value={answer} onClick={callback}>\n              <span dangerouslySetInnerHTML={{ __html: answer }} />\n            </button>\n          </ButtonWrapper>\n        ))}\n      </div>\n    </Wrapper>\n  );\n};\nexport default QuestionCard;\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./img/collov.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\nhtml{\n    height: 100%;\n}\n\nbody{\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n}\n\n*{\n    box-sizing: border-box;\n    font-family: 'Catamaran', sans-serif;\n}\n`;\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  > p {\n    color: #000;\n    font-size: 2rem;\n  }\n  h1 {\n    font-family: Fascinate Inline, Haettenschweiler, \"Arian Narrow Bold\",\n      sans-serif;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    background-size: 100%;\n    background-clip: text;\n    --webkit-background-clip: text;\n    --webkit-text-fill-color: transparent;\n    --moz-background-clip: text;\n    --moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin: 20px;\n    padding: 5px;\n    border-radius: 4px;\n    @media only screen and (max-width: 768px) {\n      font-size: 35px;\n    }\n  }\n  .start,\n  .next {\n    cursor: pointer;\n    background-image: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .start {\n    max-width: 200px;\n  }\n  .score {\n    @media only screen and (max-width: 768px) {\n      margin: 15px 0;\n    }\n  }\n`;\n","import React, { useState } from \"react\";\n\n//Component\nimport QuestionCard from \"./components/QuestionCard\";\n//Type\nimport { fetchQuizQuestions, Difficulty, QuestionState } from \"./API\";\n//styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const TOTAL_QUESTION = 10;\n\n  const starTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestion = await fetchQuizQuestions(\n      TOTAL_QUESTION,\n      Difficulty.Easy\n    );\n    setQuestions(newQuestion);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //User answer\n      const answer = e.currentTarget.value;\n      //Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      //Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      //Save answer in the array for user answer\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n  const nextQuestion = () => {\n    // move on the next question if not the last question\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTION) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper className=\"app\">\n        <h1>Question card</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTION ? (\n          <button className=\"start\" onClick={starTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading ? <p>Loading question ...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestion={TOTAL_QUESTION}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n          !loading &&\n          userAnswers.length === number + 1 &&\n          number !== TOTAL_QUESTION - 1 && (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next question\n            </button>\n          )}\n      </Wrapper>\n    </>\n  );\n};\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}